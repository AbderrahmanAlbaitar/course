---
title: "Introducci√≥"
subtitle: "Unitat 1 ¬∑ Sistemes Operatius (SO)"
author: "Jordi Mateo Forn√©s"
logo: "/figures/corporative/institute.png"
format: 
  revealjs:
    transition: fade
    slide-number: true
    incremental: true 
    chalkboard: false
    css: styles.css
    footer: "Unitat 1 ¬∑ Sistemes Operatius (SO) [üè†](/index.html)</a>"
editor: visual

execute:
  freeze: auto
  echo: false
---

# Presentacions

## Qui soc? {.smaller}

::::: columns
::: {.column width="60%"}
### Curr√≠culum

-   Enginyer i Doctor en Inform√†tica per la [UdL](http://www.udl.cat/).

### Doc√®ncia

-   Professor **agregat** a la [UdL](http://www.udl.cat/) des de 2019.
-   Sistemes Operatius (*GTIDIC*, *GEI*).
-   Administraci√≥ de Sistemes (*GTIDIC*, *GEI*).
-   Desenvolupament d'Aplicacions per a dispositus m√≤vils (*GTIDIC*).
-   Cloud Compunting (*Master in Health Data Science*)
-   High Performance Computing (*M√†ster en Enginyeria Inform√†tica*)
:::

::: {.column width="40%"}
### Recerca

-   Membre del grup de recerca [**Grup de computaci√≥ distribu√Øda**](http://gcd.udl.cat) des de 2012 (Universitat de Lleida).
-   Membre del grup de recerca [**Essence: Data Engineering & Distributed Computing Systems**](https://www.dcs.gla.ac.uk/essence/index.html) des de 2022 (Universitat de Glasgow).
-   Computaci√≥ distribu√Øda: *Cloud, Edge i Fog Computing*.
-   Camps d'aplicaci√≥: *Salut electr√≤nica i Energia*.
:::
:::::

## Qui sou?

#### Qu√® us ha portat fins aqu√≠?

::: center-container
![](../figures/slides/01-introduction/how_are_you.png){width="40%"}
:::

::: notes
Per con√®ixer-vos una mica millor, m'agradaria que respongu√©ssiu 4 preguntes de forma breu i concisa, que m'ajudaran a entendre les vostres motivacions i expectatives respecte a aquesta assignatura. Us deixo 5 minuts per respondre-les.
:::

# Introducci√≥ al curs

## Presentaci√≥

::: center
[**Benvinguts a Sistemes Operatius**]{.alert}
:::

:::::: columns
:::: {.column width="70%"}
``` c
char text[] = "Aquesta NO √©s una assignatura\n\
      centrada en la  programaci√≥\n\
      PER√í programarem MOLT!\n";
ssize_t bytes = write(1, text, sizeof(text) - 1);
```

------------------------------------------------------------------------

``` bash
text="Aquesta assignatura NO √©s un MON√íLEG." 
echo $text
```

<br>

::: {style="text-align: center;"}
Vull sessions interactives, participatives,... pregunteu, interrompeu-me...
:::
::::

::: {.column width="30%"}
![](../figures/slides/01-introduction/os_programming.png)
:::
::::::

::: notes
Si b√© aquesta assignatura no se centra exclusivament en l'aprenentatge de la programaci√≥, la pr√†ctica de codificaci√≥ ser√† fonamental. Un sistema operatiu √©s, en ess√®ncia, un programa extremadament complex, i per entendre'n el funcionament, cal aprofundir en el seu codi font.

Per aix√≤, la nostra eina principal ser√† el llenguatge de programaci√≥ C, ja que √©s el llenguatge amb qu√® s'han constru√Øt sistemes operatius hist√≤rics i de refer√®ncia com Linux i Unix. A m√©s, per comprendre com el codi d'alt nivell es comunica amb el maquinari, √©s crucial entendre com es tradueix a codi m√†quina; aqu√≠ √©s on la comprensi√≥ del llenguatge Assembler es torna imprescindible.

Tot i que llenguatges m√©s moderns com Rust o Go s'utilitzen cada vegada m√©s en el desenvolupament de sistemes, el C continua sent el pilar sobre el qual es construeix la major part del nostre m√≥n digital.

Finalment, vull que aquestes sessions siguin realment interactives i participatives. Si us plau, no dubteu a interrompre'm i a plantejar qualsevol pregunta o dubte que tingueu en el moment. La meva intenci√≥ no √©s fer un mon√≤leg, sin√≥ crear un di√†leg constructiu i col¬∑laboratiu entre tots.
:::

## Coneixement previ (I)

#### Quin sistema operatiu utilitzeu/coneixeu?

::: center-container
![](../figures/slides/01-introduction/menti1.png){width="40%"}
:::

::: notes
Per comen√ßar, m'agradaria saber quin sistema operatiu utilitzeu o coneixeu. Aix√≤ ens ajudar√† a entendre el nivell de familiaritat que teniu amb diferents sistemes i ens permetr√† adaptar millor el contingut del curs a les vostres necessitats. Escaneja el codi QR i introdueix les vostres respostes, podeu respondre m√©s d'una opci√≥ si coneixeu diversos sistemes operatius.
:::

## Objectius (Globals)

1.  **Entendre els Sistemes Operatius**: Com estan dissenyats i quins components (o m√≤duls) els formen.
2.  **Coneixer els seus serveis**: Quines funcions proporcionen a usuaris i aplicacions.
3.  **Aprendre a programar amb ells**: Com utilitzar els serveis del sistema operatiu per crear aplicacions de manera eficient.
4.  **Avaluar cr√≠ticament les seves pol√≠tiques**: Analitzar com el sistema operatiu gestiona els seus recursos, com la mem√≤ria, i comparar diferents m√®todes per fer-ho.

## Objectius (Espec√≠fics)

-   Con√®ixer els sistemes operatius Unix/Linux (en concret **Debian**).
-   Interioritza les bases de programaci√≥ **C** per millora les vostres habilitats en altres llenguatges.
-   Desenvolupar programari a nivell de sistema en el llenguatge de programaci√≥ **C** comprenent al mateix temps com funcionen els **Sistemes Operatius** basats en **Unix**.

## Temari

1.  Introducci√≥ als Sistemes Operatius.
2.  Estructura dels Sistemes Operatius.
3.  Gesti√≥ i comunicaci√≥ de processos i threads.
4.  Sincronitzaci√≥ i Planificador de tasques.
5.  Interbloqueig.
6.  Gesti√≥ de Mem√≤ria.
7.  Scripting.

## Metodologia {.smaller}

::: {style="text-align: center;"}
Basada en \blueArrow Aprenentatge **SIGNIFICATIU**, **GUIAT** i **ACTIU**.
:::

-   **Sessions te√≤riques**: S‚Äôintrodueixen continguts te√≤rics de l‚Äôassignatura i als estudiants, i tamb√© s‚Äôhi discuteixen les implicacions pr√†ctiques.
-   **Sessions pr√†ctiques**: sessions autoguiades de laboratori, sessions de *live coding* o resoluci√≥ de problemes.
-   **Treball aut√≤nom**: els estudiants han d'aplicar els coneixements adquirits a les sessions te√≤riques i pr√†ctiques per acabar els problemes, laboratoris i projectes proposats. A m√©s, han de realitzar les lectures dels apunts i consultar la bibliografia recomanada.

::: {.fragment style="text-align: center;"}
Les sessions te√≤riques i pr√†ctiques estan combinades en les sessions de 3h de durada.
:::

::: notes
La idea √©s que no us dediqueu nom√©s a memoritzar conceptes, sin√≥ que connecteu la nova informaci√≥ amb el que ja sabeu. Tot i que a la pr√†ctica fareu moltes coses per vosaltres mateixos, jo ser√© aqu√≠ per guiar-vos. Us donar√© les eines, el suport i les indicacions necess√†ries per anar avan√ßant.Volem que sigueu protagonistes del vostre proc√©s d'aprenentatge. No us limitareu a escoltar-me, sin√≥ que fareu coses, resoldreu problemes i creareu projectes.

1.  Sessions te√≤riques: Aqu√≠ introduirem els conceptes clau i els fonaments te√≤rics. Per√≤ no ens quedarem nom√©s amb la teoria; tamb√© discutirem com s'apliquen aquests conceptes al m√≥n real.
2.  Sessions pr√†ctiques: Farem sessions de laboratori on programareu, farem exercicis de live coding junts per resoldre problemes en directe i practicareu les habilitats que necessiteu.
3.  Treball aut√≤nom: La major part de l'aprenentatge real es far√† fora de l'aula. Us demanar√© que acabeu els laboratoris, resolgueu els exercicis pendents i treballeu en els projectes. Tamb√© ser√† important que reviseu els apunts i, si cal, consulteu la bibliografia recomanada.

Les sessions te√≤riques i pr√†ctiques estaran combinades. La idea √©s que no hi hagi una desconnexi√≥ entre la teoria i la pr√†ctica. Com tenim sessions de 3 hores, podrem dedicar una part a la teoria i l'altra a la pr√†ctica, tot integrat en una sola experi√®ncia d'aprenentatge.
:::

# Avaluaci√≥

## Criteris d'Avaluaci√≥

| Acr. | Activitat d'avaluaci√≥ | Pes | Nota m√≠nima | En grup | Recuperable |
|-----------|---------------------|-----------|-----------|-----------|-----------|
| **E1** | **1er Parcial** | **35%** | **NO** | **NO** | **SI** |
| **E2** | **2on Parcial** | **35%** | **NO** | **NO** | **SI** |
| **P** | **Pr√†ctiques** | **25%** | **NO** | **SI** $\leq 2$ | **NO** |
| **Part** | **Seguiment i Participaci√≥** | **5%** | **NO** | **NO** | **NO** |

::: notes
Aquesta assignatura s'avaluara de forma tradicional mitjan√ßant dos ex√†mens parcials (E1 i E2) que representen el 70% de la nota final. A m√©s, hi haur√† pr√†ctiques que contribuiran amb un 25% a la nota final, i un component de seguiment i participaci√≥ que valdr√† un 5%.
:::

## Ex√†mens

Els ex√†mens parcials (**E1 i E2**) s√≥n *proves escrites que avaluen els coneixements **te√≤rics** i **pr√†ctics*** adquirits durant el curs.

-   S√≥n proves individuals i presencials.
-   Es realitzaran en les dates establertes al calendari acad√®mic.
-   No es permet l'√∫s de cap dispositiu electr√≤nic (tel√®fons m√≤bils, ordinadors port√†tils o tauletes).
-   Si es permet l'√∫s d'un resum de continguts, que ha de ser un document escrit a m√† i no pot excedir una fulla DIN A4 (per davant i per darrere).

## Recuperaci√≥ {.smaller}

-   Els parcials s√≥n recuperables mitjan√ßant proves escrites addicionals que es realitzaran durant la setmana de recuperaci√≥.
-   Si un estudiant necessita recuperar un √∫nic parcial (**E1** o **E2**), podr√† fer una prova espec√≠fica per a aquest parcial. *La qualificaci√≥ obtinguda en aquesta recuperaci√≥ substituir√† la nota del parcial corresponent*.
-   Si un estudiant necessita recuperar ambd√≥s parcials, haur√† de realitzar dues proves separades, una per a cada parcial (**E1** i **E2**). Les qualificacions obtingudes en cadascuna d'aquestes proves de recuperaci√≥ substituiran les notes originals dels parcials respectius.
-   √âs important notar que **no hi haur√† un model d'examen unificat per a la recuperaci√≥**; *cada prova de recuperaci√≥ se centrar√† exclusivament en els continguts del parcial al qual correspon*.

## Pr√†ctiques {.smaller}

-   Les pr√†ctiques de l'assignatura impliquen treball fora de l'aula i s'han de lliurar de forma estricta en les dates establertes.
-   La seva avaluaci√≥ es far√† mitjan√ßant r√∫briques de correcci√≥, que estaran disponibles per als estudiants amb antelaci√≥.
-   El professorat pot entrevistar els estudiants per verificar l'autoria. Si es detecta que una activitat *no ha estat realitzada per l'estudiant* la seva qualificaci√≥ **ser√† 0**.
-   Qualsevol entrega *fora del termini establert* es considerar√† no v√†lida i es **qualificar√† amb un 0**.
-   Cadascuna pot tenir una **ponderaci√≥ espec√≠fica** indicada a la descripci√≥ de l'activitat.
-   Aquestes pr√†ctiques **no s√≥n recuperables**.
-   Tot i ser activitats en grup, *cada estudiant pot obtenir una nota diferent* en funci√≥ de la seva participaci√≥ i **aportacions individuals al grup**.

## Seguiment i Participaci√≥ {.smaller}

::: {.callout-warning title="R√∫brica d'Avaluaci√≥ "}
| Punts | Participaci√≥ Presencial | Participaci√≥ en F√≤rums | Activitats Sessi√≥ |
|------------------|------------------|------------------|------------------|
| **10** | Contribucions excepcionals,enriqueix la discussi√≥. | L√≠der en discussions, promou debat. | Qualitat excepcional, supera expectatives. |
| **9** | Comentaris rellevants, mostra comprensi√≥, escolta activament. | Respostes significatives. | Alta qualitat, treball prec√≠s. |
| **8** | Contribucions regulars, interactua amb companys. | Publicacions rellevants, contribueix constructivament. | Compleix tots requisits amb precisi√≥. |
| **7** | Participa amb una comprensi√≥ b√†sica. | Compleix m√≠nims, contribucions breus. | Qualitat inconsistent per√≤ acceptable. |
| **5-6** | Poca freq√º√®ncia, comentaris superficials. | Publicacions rares, poc profundes. | Algunes activitats incompletes. |
| **1-4** | Nom√©s participa si se li demana. | Publicacions irrellevants. | Rarament completa activitats. |
| **0** | Evita participar, distret. | Publicacions fora de tema. | No lliura activitats. |
:::

::: {style="text-align: center;"}
L'assist√®ncia passiva no es puntua.
:::

::: notes
Aquest component d'avaluaci√≥ est√† dissenyat per fomentar la participaci√≥ activa i el comprom√≠s amb l'assignatura. La participaci√≥ no es limita nom√©s a l'assist√®ncia a classe, sin√≥ que tamb√© inclou la contribuci√≥ en discussions, f√≤rums en l√≠nia i activitats relacionades amb les sessions. Tota participaci√≥ ha de ser rellevant i constructiva per ser valorada positivament. En aquesta r√∫brica, es detallen els criteris espec√≠fics que s'utilitzaran per avaluar la participaci√≥ dels estudiants en diferents √†mbits.
:::

## Bonus 1 {.smaller}

::::::: columns
::: {.column width="55%"}
-   **Objectiu**: Fomentar la reflexi√≥ i l'autoavaluaci√≥ dels continguts treballats a classe.
-   **Metodologia**: Cada setmana, els estudiants han de fer un commit al seu repositori d'apunts amb les notes de les sessions de teoria i pr√†ctiques.
-   **Avaluaci√≥**: Es valorar√† la qualitat de les notes, la seva coher√®ncia i la seva relaci√≥ amb els continguts treballats, aix√≠ com les reflexions i opinions personals incloses.
-   Per participar cal crear un repositori a Github (p√∫blic) i fer-me arribar l'enlla√ß.
:::

::: {.column width="5%"}
:::

:::: {.column width="40%"}
### Exemple de Notes

``` markdown
## Setmana X

# Resum te√≤ric

# Exemples pr√†ctics

# Dubtes i preguntes

# Reflexions personals
```

::: {.callout-warning title="No es permet cap altre forma "}
Les notes han de ser escrites en format Markdown i mantingudes en un repositori Git i Github.
:::
::::
:::::::

::: notes
Aquest bonus est√† dissenyat per incentivar els estudiants a mantenir un registre organitzat i reflexiu dels continguts treballats a classe. En fer un commit setmanal amb les seves notes, els estudiants no nom√©s reforcen el seu aprenentatge, sin√≥ que tamb√© desenvolupen habilitats de documentaci√≥ i autoavaluaci√≥. La qualitat de les notes ser√† clau en l'avaluaci√≥, ja que es valorar√† no nom√©s la precisi√≥ dels continguts, sin√≥ tamb√© la capacitat de reflexionar sobre el que s'ha apr√®s i com s'ha aplicat aquest coneixement. Es tracta d'una oportinitat per als estudiants per crear el seu diari d'aprenentatge al llarg del curs. Per participar, els estudiants han de crear un repositori p√∫blic a Github i compartir l'enlla√ß amb el professorat.
:::

## Bonus 2

::::: columns
::: {.column width="40%"}
-   Els materials s√≥n *Open Source*.
-   Qualsevol estudiant pot detectar errors, millorar els materials o afegir continguts nous.
-   S'avaluar√† la quantitat i qualitat.
:::

::: {.column width="60%"}
![](../figures/slides/01-introduction/bonus2.png)
:::
:::::

::: notes
Un altre bonus que oferim √©s la possibilitat de contribuir als materials de l'assignatura seguint la metodologia de *Open Source*. Aix√≤ significa que qualsevol estudiant pot detectar errors, suggerir millores o afegir continguts nous als materials proporcionats. Per participar, els estudiants poden fer un *fork* del repositori de l'assignatura, treballar en una branca separada i despr√©s obrir una *pull request* amb les seves propostes de canvi. La quantitat i qualitat de les contribucions seran avaluades, oferint aix√≠ una oportunitat per als estudiants de participar activament en la millora dels recursos educatius.
:::

# Normativa del curs

## Gesti√≥ del curs

-   Es demana que els estudiants **arribin puntuals** a les sessions. L'entrada tardana pot interrompre la din√†mica de la classe i el treball dels companys.
-   Es demana que els estudiants respectin les normes de conviv√®ncia i respecte mutu durant les sessions de classe. Aix√≤ inclou evitar interrupcions innecess√†ries, escoltar activament als companys i al professor, i mantenir un ambient de treball positiu i constructiu.

## Comunicaci√≥ amb el professorat

-   Intenteu comunicar-vos a trav√©s del correu electr√≤nic i no per l'eina del campus virtual per assegurar una resposta m√©s r√†pida.
-   Les sessions de tutoria es realitzaran de manera *presencial o virtual*, segons les necessitats dels estudiants. √âs important que els estudiants sol¬∑licitin cita pr√®via per a les tutories utilitzant el correu electr√≤nic [jordi.mateo\@udl.cat](mailto:jordi.mateo@udl.cat){.email} indicant el motiu de la consulta i la disponibilitat hor√†ria i afegint l'assumpte **\[SO\]: Sol¬∑licitud de Tutoria**.

## Treball individual

-   Cada estudiant √©s responsable de la seva pr√≤pia feina i de com gestiona el seu temps.
-   L'assist√®ncia a classe no √©s obligat√≤ria.
-   Cada alumne ha de presentar evid√®ncies pr√≤pies del treball realitzat, encara que es col¬∑labori en grup.

## √ös de la IAG {.smaller}

-   **Pots utilitzar eines d'IAG** per *generar idees, entendre conceptes complexos o esbossar l'estructura inicial del teu codi o projecte*. No obstant aix√≤, **la implementaci√≥ i la versi√≥ final han de ser sempre de la teva autoria**.
-   Est√† estrictament **prohibit** *presentar codi o solucions generades directament per una IAG com a treball propi (√©s a dir, mitjan√ßant un simple copiar i enganxar)*.
-   Si incorpores material assistit per una IAG, **has de declarar-ho expl√≠citament**. Aix√≤ implica identificar clarament les seccions generades per IAG i proporcionar el prompt exacte utilitzat per crear-les.

::: {.fragment style="text-align: center;"}
L'incompliment d'aquestes directrius es considerar√† una violaci√≥ de la integritat acad√®mica.
:::

-   Qualificaci√≥ de zero en la tasca.
-   Conseq√º√®ncies disciplin√†ries que estableix la Normativa de Conviv√®ncia de la UdL per frau acad√®mic.

## Eines necess√†ries {.smaller}

-   Ordinador port√†til amb connexi√≥ a Internet.
    -   Es recomana portar el vostre propi ordinador per cursar l‚Äôassignatura.
    -   Si no disposeu d‚Äôordinador, podreu utilitzar els ordinadors de la classe durant les sessions de laboratori.
-   Distribucions Linux ([Debian](https://www.debian.org/index.ca.html) )
    -   √âs obligatori utilitzar la distribuci√≥ Debian per a les pr√†ctiques de laboratori.
-   Software de virtualitzaci√≥ (VMWare)
    -   Es recomana utilitzar VMWare, per√≤ podeu optar per altres opcions de virtualitzaci√≥. Heu de ser capa√ßos d‚Äôadaptar el material al vostre programari de virtualitzaci√≥.

## Programari necessari {.smaller}

#### Llenguatges de programaci√≥ i compiladors

-   C
-   [GCC](https://gcc.gnu.org/)

#### Eines de control de versions {.fragment}

-   [Git](https://git-scm.com/)
-   [Github](https://github.com/)

#### IDE {.fragment}

-   Visual Studio (Recomanat)
-   Vi, Vim, NeoVim, Emacs, CLion, Eclipse ...

## Materials i Recursos

-   Apunts de l'assignatura i materials proporcionats pel professor.
-   Documentaci√≥ oficial de les eines i tecnologies utilitzades.
-   F√≤rums t√®cnics a la xarxa com *Stack Overflow, Reddit*, etc.
-   Llibres de refer√®ncia en Sistemes Operatius:
    -   [Operating System Concepts; Abraham Silberschatz](https://www.amazon.com/Operating-System-Concepts-Abraham-Silberschatz/dp/0470128720)
    -   [Modern Operating Systems; Andrew S. Tanenbaum](https://www.amazon.com/Modern-Operating-Systems-Andrew-Tanenbaum/dp/013359162X)

## Bones pr√†ctiques {.smaller}

-   DRY (Do not repeat yourself).
-   Codi f√†cil de reutilitzar.
-   Testeja aviat, testeja sovint, testeja de forma autom√†tica.
-   No assumeixis res, prova-ho.
-   Utilitza assertions per prevenir l'impossible.
-   Utilitza excepcions per problemes excepcionals.
-   Estima l'ordre de complexitat dels teus algorismes.
-   Utilitza patrons de disseny.
-   Utilitza eines de control de versions.

::: notes
Durant el curs, us animar√© a seguir aquestes bones pr√†ctiques de programaci√≥ per assegurar que el vostre codi sigui net, eficient i f√†cil de mantenir. Aquestes pr√†ctiques no nom√©s us ajudaran a desenvolupar millor programari, sin√≥ que tamb√© us prepararan per treballar en equips de desenvolupament professionals on aquestes normes s√≥n est√†ndard. Es important que el vostre codi sigui f√†cil de llegir i entendre per altres persones, incl√≤s el vostre jo futur!
:::

## Bibliografia recomanada {.smaller}

#### (per la vida... no pel curs)

:::::::: columns
:::: {.column width="50%"}
[The Pragmatic Programmer, Andrew Hunt David Thomas](https://www.amazon.es/Pragmatic-Programmer-Journeyman-Master-ebook/dp/B003GCTQAE)

::: center
![](https://images-na.ssl-images-amazon.com/images/I/41uPjEenkFL._SY445_SX342_QL70_ML2_.jpg){width="60mm"}
:::
::::

::: notes
Us aconsello molt aquests dos llibres. S√≥n llibres que no nom√©s us ajudaran en aquest curs, sin√≥ que tamb√© us seran √∫tils al llarg de tota la vostra carrera com a desenvolupadors de programari. Aquests llibres ofereixen consells pr√†ctics i principis fonamentals que us ajudaran a escriure codi utiltizant bones pr√†ctiques. S√≥n dos llibres que tot programador hauria de llegir almenys un cop a la vida.
:::

:::: {.column width="50%"}
[Clean Code, (A Handbook of Agile Software Craftsmanship),Robert C. Martin](https://www.amazon.es/Clean-Code-Handbook-Software-Craftsmanship-ebook/dp/B001GSTOAM)

::: center
![](https://images-na.ssl-images-amazon.com/images/I/41SH-SvWPxL._SX342_SY445_QL70_ML2_.jpg){width="60mm"}
:::
::::
::::::::

# Introducci√≥ a la tem√†tica

## Societat actual {.smaller}

:::::: columns
::: {.column width="30%"}
#### Qu√® tenen en com√∫?

-   Cotxe
-   Rellotge
-   Port√†til
-   Rentadora
-   Nevera
-   Televisi√≥
-   ...

#### Vivim en un gran sistema paral¬∑lel i distribu√Øt! {.fragment}
:::

:::: {.column width="70%"}
::: center
![](../figures/slides/01-introduction/iot-context.jpg){width="90%"}
:::
::::
::::::

::: notes
Per comen√ßar, m'agradaria que reflexion√©ssiu sobre qu√® tenen en com√∫ tots aquests dispositius que fem servir en el nostre dia a dia. Des de cotxes fins a rellotges, port√†tils, tauletes, rentadores, neveres i televisors, tots aquests aparells semblen molt diferents entre si. Per√≤ si mirem m√©s a fons, veurem que tots compartixen dos caracter√≠stiques fonamentals: tots s√≥n dispositius electr√≤nics que interactuen amb nosaltres i tots estan connectats a internet. Aquesta connexi√≥ a internet √©s el que els permet comunicar-se entre si i amb nosaltres. Aix√≤ ens porta a la seg√ºent reflexi√≥: vivim en un m√≥n on tot est√† interconnectat, podem dir que vivim en un m√≥n distribu√Øt on tots aquests dispositius treballen junts per fer-nos la vida m√©s f√†cil i eficient.
:::

## M√≥n connectat {.smaller}

::: {style="text-align: center;"}
Avui en dia tothom parla de **IoT**, **BigData**, **Cloud**, **AI**, **Blockchain**, **Metavers**
:::

::::: columns
::: {.column width="45%"}
-   Microprocessador a tot arreu.
-   Xarxes i Connectivitat.
-   Serveis escalables, confiables i segurs.
-   Gran volum de dades, Sensor i Digitalitzaci√≥.
:::

::: {.column width="45%"}
![Casa connectada (Font: Extret de [SemanticScholar](https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.semanticscholar.org%2Fpaper%2FPotentials%252C-trends%252C-and-prospects-in-edge-Fog%252C-and-Bilal-Khalid%2F65ec75e721634b392d23364f8d67a68aedc1c189%2Ffigure%2F12&psig=AOvVaw1BjiOrDFoVjQMPpgDItKZ3&ust=1631713120802000&source=images&cd=vfe&ved=0CAsQjRxqFwoTCIjDvp7L_vICFQAAAAAdAAAAABAJ))](https://d3i71xaburhd42.cloudfront.net/65ec75e721634b392d23364f8d67a68aedc1c189/15-Figure9-1.png)
:::
:::::

::: {.fragment style="text-align: center;"}
**La barrera que separa el m√≥n f√≠sic i el m√≥n virtual cada cop es mes estreta.**
:::

::: notes
En la societat actual es parla constatant de noves tecnologies disruptives com **IoT**, **BigData**, **Cloud**, **AI**, **Blockchain**, **Metavers**,... Per tant, com a societat tenim la capacitat d'interactuar amb el nostre entorn i ambient. Aix√≤ implica que tenim microprocessadors a tot arreu, disposem de xarxes i connectivitat que ens permeten estar sempre connectats, podem accedir a serveis escalables, confiables i segurs, i gestionem un gran volum de dades gr√†cies a la digitalitzaci√≥ i els sensors.

Ara, pensem un moment en el nostre dia a dia: - Quants teniu un cotxe? Quants processadors creieu que t√© un cotxe? - M√©s de 50! - Qui utilitza un smartphone? Quants processadors/cores t√© el vostre smartphone? - El meu un Poco X4 GT t√© un MediaTek Dimensity 8100 amb 8 nuclis.

La capacitat de computaci√≥ est√† present a tot arreu, i la majoria dels dispositius que utilitzem di√†riament estan equipats amb microprocessadors que funcionen de manera paral¬∑lela i interactuen entre ells. Per tant, el m√≥n f√≠sic i el m√≥n virtual estan cada cop m√©s interconnectats, i la barrera que els separa es fa cada cop m√©s estreta.
:::

## Qu√® tenen en com√∫? {.smaller}

::: {style="text-align: center;"}
Una **interf√≠cie** (*Sistema Operatiu*) capa√ß **d'integrar una gran diversitat de maquinari i programari** i **comunicar-se a trav√©s de la xarxa**.
:::

::: center-container
![](../figures/slides/01-introduction/so_intro.png)
:::

::: notes
Per√≤, **que tenen en com√∫ aquests progressos tecnol√≤gics?** Requereixen un cervell que permeti a tots els diferents aparells i m√†quines interactua amb nosaltres, tant per generar, processar o guardar. Tots els dispositius i servidors requereixen un sistema operatiu que permeti maquinari i programari comunicar-se.

En aquest curs tractarem els cervells d'aquests sistemes i analitzarem de quines estructures podem dotar aquests sistemes perqu√® funcionin correctament i permeti que maquinari tan heterogeni sigui capa√ß de fer funcionar infinitat de programes i serveis \blueArrow per gestionar eficientment les dades i la informaci√≥ del nostre entorn.

Per tant, a la pregunta inicial qu√® tenen en com√∫? podem afirmar:

-   Tenen en com√∫ que tots s√≥n sistemes inform√†tics.
-   Tots tenen un sistema operatiu.
-   Tots es communiquen per internet amb altres sistemes.
:::

## Llei de Bell

::: center-container
![](../figures/slides/01-introduction/bell.png)
:::

::: notes
Es pot observar com la mida i les classes de computadors han evolucionat cada 10 anys. Venim de la d√®cada dels anys 60 i 70, on es van desenvolupar els primers microprocessadors i la inform√†tica personal estava en les seves primeres etapes. En aquesta √®poca, es feien servir pocs processadors que eren compartits per moltes persones. Els avan√ßos en la capacitat de processament eren m√©s lents, i la tecnologia era m√©s limitada. Ara, en l'actualitat, cada persona fa servir molts processadors de manera habitual. Aix√≤ es deu a l'augment de la pot√®ncia de processament dels dispositius que utilitzem, com els tel√®fons intel¬∑ligents i les tauletes, aix√≠ com als ordinadors personals i altres tecnologies. Venim de pocs processadors fets servir per a moltes persones (anys 60-70) i ara cada persona fa servir molts processadors. Com ha canviat la tend√®ncia... on ens portar√† el futur?
:::

## Llei de Moore

::: center-container
![](https://upload.wikimedia.org/wikipedia/commons/9/90/Ley_de_Moore.png)
:::

::: notes
Us recordeu la llei de Moore? Aquesta llei, formulada per Gordon Moore el 1965, predia que el nombre de transistors en un microprocessador es duplicaria aproximadament cada dos anys, cosa que implicava un augment exponencial de la pot√®ncia de c√†lcul dels ordinadors. Aquesta predicci√≥ s'ha mantingut sorprenentment precisa durant d√®cades, impulsant avan√ßos tecnol√≤gics i transformant la manera com vivim i treballem. No obstant aix√≤, a mesura que ens acostem als l√≠mits f√≠sics de la miniaturitzaci√≥ dels transistors, hi ha un debat continu sobre si aquesta tend√®ncia continuar√† en el futur o si necessitarem noves tecnologies per mantenir el ritme d'innovaci√≥.
:::

## Qu√® √©s un sistema inform√†tic? {.smaller}

Un **sistema inform√†tic** √©s la interconnexi√≥ d'elements de maquinari per exemple *d'1 o m√©s CPU, mem√≤ria i components E/S* ... Amb la finalitat d'executar programes i accions (en s√®rie o de forma concurrent) per *1 o m√∫ltiples usuaris*.

::::: columns
::: {.column width="30%"}
![](../figures/slides/01-introduction/parallel.png){width="70%"}
:::

::: {.column width="70%"}
![](../figures/slides/01-introduction/sistema-informatic.png)
:::
:::::

::: notes
Si us recordeu d'Estructura de Computadors, un sistema inform√†tic √©s la interconnexi√≥ d'elements de maquinari com ara una o m√©s CPU, mem√≤ria i components d'entrada/sortida. Tenim els registres, la mem√≤ria cau, la mem√≤ria principal, els dispositius d'entrada/sortida i els canals de comunicaci√≥ que permeten que tots aquests components treballin junts per executar programes i accions.

Com heu vist el mon real actua com un gran sistema paral¬∑lel. Per tant, tots els sistemes de temps real son inherentment concurrents i l√≤gicament els nostres sisteme inform√†tics tamb√© han de poder actuar en paral¬∑lel. En la figura, podeu observar com una tasca es descomposa en diferents parts per poder aprofitar els diferents processadors i nuclis de cada processador.L'execuci√≥ **concurrent** recull un conjunt de t√®cniques inform√†tiques usades per representar i gestionar el paral¬∑lelisme i les eines de sincronitzaci√≥ i comunicaci√≥ entre programes.
:::

## Gesti√≥ d'un sistema inform√†tic (I) {.smaller}

::: {style="text-align: center;"}
Imagineu que sou un sistema inform√†tic i us envien l'ordre de llegir un fitxer
:::

-   **Quin √©s el procediment per fer aquesta acci√≥?**
    -   Engegar motor del disc.
    -   Buscar posici√≥ al disc a llegir (pista, cara, sector).
    -   Llegir.
    -   Apagar el motor.
-   **Quantes vegades com a usuaris d'un sistema inform√†tic llegiu un fitxer?**

::: {.fragment style="text-align: center;"}
Moltes vegades...!
:::

::: notes
Com a usuaris d'un sistema inform√†tic llegim fitxers moltes vegades al dia. Per exemple, quan obrim un document de text, una imatge, un v√≠deo o qualsevol altre tipus d'arxiu, el sistema operatiu ha de llegir aquest fitxer des del disc dur o una altra unitat d'emmagatzematge. Per√≤, us heu preguntat alguna vegada quin √©s el procediment que segueix el sistema inform√†tic per llegir aquest fitxer? Hauriam d'engegar el motor del disc, buscar la posici√≥ correcta al disc on es troba el fitxer, llegir les dades i finalment apagar el motor. *T√© sentit que un usuari cada cop que llegeix un fitxer hagi de tenir en compte aquest procediment i realitzar-lo de forma rutin√†ria?* Necessitem un programari que ens permeti efectuar accions rutin√†ries de forma autom√†tica i transparent a l'usuari. Si no els sistemes inform√†tics no serien usables.
:::

## Complexitat sistemes inform√†tics (I) {.smaller}

::: center
Cada pe√ßa de hardware √©s diferent. $\Rightarrow$ La complexitat per gestionar els recursos √©s molt elevada.
:::

-   Arquitectures diferents de processadors i tamb√© de generacions (*x86, ARM, RISC-V, MIPS, PowerPC,...*).
-   Diferents tipus de mem√≤ries (*RAM DDR3, DDR4, DDR5, NAND,...*).
-   Diferents tipus de discs (*HDD, SSD, NVM...*).
-   Diferents dispositius entrada/sortida.
-   Diferents entorns de xarxa.

::: {.fragment style="text-align: center;"}
**... entre moltes altres ...**
:::

::: notes
Us imagineu haver d'escriure software per cada permutaci√≥ d'elements diferents del sistema inform√†tic? Aix√≤ seria un desastre... Quantes permutacions de diferents components podem tenir avui en dia? OMG! Necessitem alguna cosa que ens permeti superar aquest obstacle de forma intel¬∑ligent i ens permeti desenvolupar software de forma independent al hardware.
:::

## Complexitat sistemes inform√†tics (III) {.smaller}

Tots els programes necessiten accedir a tot el hardware?

::: {.fragment style="text-align: center;"}
Per suposat que no! Aix√≤ podria causar problemes de seguretat com:

-   **P√®rdua de confidencialitat**: Acc√©s no autoritzat a dades sensibles.
-   **Acc√©s a informaci√≥ restringida**: Usuaris no autoritzats podrien veure dades privades.
-   **Denegaci√≥ de serveis**: Un programa podria bloquejar l'acc√©s a recursos per a altres programes.
:::

::: fragment
Qu√® pot passar si un programa pot accedir a tota la RAM?
:::

-   Un programa de l'usuari Jordi amb acc√©s a tota la RAM podria veure les dades del programa de l'usuari Pere.
-   Si el programa falla, podria afectar tot el sistema i requerir un reinici.

::: notes
No, clar que no! **Seguretat**: - Si un programa controla tot el sistema, els altres no poden accedir-hi (Denegaci√≥ de serveis). - Diferents usuaris poden tenir diferents dades; si un programa pot accedir a tot, podria veure informaci√≥ restringida. - No necessitem acc√©s a tot el hardware per realitzar les nostres tasques. - Un usuari malintencionat podria danyar el sistema amb un proc√©s defectu√≥s.
:::

## Complexitat sistemes inform√†tics (IV)

Si un sistema inform√†tic no est√† ben dissenyat, un programa mal escrit pot fer fallar tot el sistema, per exemple:

#### Bucle infinit

``` c
int main(){
    while(1);
}
```

#### Fork bomb

``` c
int main(){
    while(1);
    fork();
}
```

::: notes
Un programa o proc√©s pot fer fallar tot el sistema si no est√† ben dissenyat. Per tant, √©s important tenir en compte aquelles situacions per evitar-les. En el primer exemple, tenim un bucle infinit. Aquesta situaci√≥ en els sistemes linux actuals no √©s un problema, ja que el sistema operatiu pot gestionar aquest tipus de situacions. No obstant aix√≤, en sistemes m√©s antics, aquest tipus de bucles podrien fer que el sistema no respongu√©s. En el segon exemple, tenim un bucle infinit i una crida a la funci√≥ fork(). Aquesta funci√≥ crea un nou proc√©s que √©s una c√≤pia exacta del proc√©s pare. Aix√≤ podria fer que el sistema es satur√©s amb molts processos i no pogu√©s respondre. Aquesta situaci√≥ podria requerir un reinici del sistema per recuperar-lo i es un problema en els sistemes actuals. Fixeu-vos com un simple programa pot fer fallar tot el sistema.
:::

## Qu√® √©s un sistema operatiu? {.smaller}

Un **sistema operatiu (SO)** √©s una capa de software que permet la comunicaci√≥ i la gesti√≥ del maquinari habilitant als usuaris l‚Äôexecuci√≥ de programes. El SO actua d‚Äô**intermediari (interf√≠cie)** entre els **usuaris i el maquinari**.

![](../figures/slides/01-introduction/os-diagram.png)

::: notes
Un **sistema operatiu (SO)** √©s una capa de software que permet la comunicaci√≥ i la gesti√≥ del maquinari habilitant als usuaris l‚Äôexecuci√≥ de programes. El SO actua d‚Äô**intermediari (interf√≠cie)** entre els **usuaris i el maquinari**.

Per tant, √©s un programa que controla el maquinari i permet als usuaris interactuar amb ell. Aquesta interacci√≥ pot ser a trav√©s d‚Äôuna interf√≠cie gr√†fica d‚Äôusuari (GUI) o una interf√≠cie de l√≠nia de comandes (CLI). Tamb√©, gestiona els recursos del sistema, com la mem√≤ria, el disc dur i els dispositius d‚Äôentrada/sortida. A m√©s, el SO proporciona funcionalitats com la gesti√≥ de fitxers, la seguretat i la xarxa.

Podem dir que el SO √©s el cervell del sistema inform√†tic,ja que controla tots els components i permet als usuaris interactuar amb ells. Sense un SO, els usuaris no podrien utilitzar el maquinari del sistema de manera eficient i segura.
:::

## Qu√® volen els programadors?

::::: columns
::: {.column width="50%"}
#### Una plataforma...

-   per executar aplicacions.
-   transparent per evitar la complexitat del hardware.
-   eficient per utilitzar els recursos de forma √≤ptima.
-   portable per utilitzar-ho indepedentment del hardware.
:::

::: {.column width="50%"}
![](../figures/slides/01-introduction/esquema1.png)
:::
:::::

::: notes
Des del punt de vista dels programadors, el que volen √©s una plataforma per executar les seves aplicacions. Aquesta plataforma ha de ser transparent per evitar la complexitat del hardware, eficient per utilitzar els recursos de forma √≤ptima i portable per utilitzar-ho indepedentment del hardware.El kernel √©s la capa interm√®dia que connecta el programari de l'usuari amb el maquinari f√≠sic de l'ordinador. A la imatge es pot veure com el kernel actua com un pont entre l'aplicaci√≥ i el maquinari. Quan un programador escriu una aplicaci√≥, no necessita preocupar-se per com funciona el maquinari a nivell de circuits. En canvi, pot utilitzar les funcions proporcionades pel kernel per interactuar amb el maquinari de manera m√©s senzilla i eficient. Els usuaris finals tamb√© es beneficien d'aquesta abstracci√≥, ja que poden utilitzar aplicacions sense necessitat de con√®ixer els detalls t√®cnics del maquinari. El kernel permet que el mateix codi pugui funcionar en diferents ordinadors amb maquinari diferent. Un programador pot escriure una aplicaci√≥ (com un navegador web) una sola vegada, i el kernel s'encarregar√† de traduir les seves instruccions per al maquinari espec√≠fic de cada m√†quina. Tamb√© gestiona de manera eficient els recursos del sistema, com el temps de processador, l'√∫s de la mem√≤ria o l'acc√©s al disc.
:::

## Qu√® ofereix el sistema operatiu? {.smaller}

:::::: columns
:::: {.column width="50%"}
#### Serveis

-   Controlar/Gestionar usuaris i aplicacions.
-   Gestionar la Mem√≤ria.
-   Sistema de fitxers.
-   Planificadors.
-   Eines de xarxa.

::: fragment
#### Garanties

-   Seguretat.
-   Transpar√®ncia.
-   Efici√®ncia.
-   Portabilitat.
-   Estabilitat al llarg del temps.
:::
::::

::: {.column width="50%"}
![](../figures/slides/01-introduction/esquema2.png)
:::
::::::

::: notes
Observeu que el kernel ens ofereix una interf√≠cie d'usuari amb serveis com el sistema de fitxers, la gesti√≥ de la mem√≤ria, la planificaci√≥ de processos i les eines de xarxa. I per sota d'aquestes capes, tenim els drivers que ens permeten interactuar amb el maquinari f√≠sic de l'ordinador.
:::

## Com s'organitza el sistema operatiu?

::::::: columns
:::: {.column width="40%"}
::: center
![](../figures/slides/01-introduction/os-vm.png)
:::
::::

:::: {.column width="60%"}
#### Maquina virtual

√âs la *visi√≥* que t√© l'**usuari** del **sistema operatiu** durant una *sessi√≥ de treball*.

::: fragment
#### Dualitat

El **sistema operatiu** divideix el programari que t√© tots els privilegis(**kernel**) del programari que no pot accedir a tots els recursos (**programes, llibreries, int√®rpret de comandes,...**).
:::
::::
:::::::

::: notes
Aquest concepte descriu la visi√≥ que tenim nosaltres, els usuaris, del sistema. Quan treballem amb un ordinador, veiem una interf√≠cie amigable: icones, finestres, aplicacions. Aquesta √©s la m√†quina virtual que el sistema operatiu ens crea. √âs una capa abstracta que simplifica les tasques complexes del maquinari i ens permet centrar-nos en el nostre treball. Penseu-hi com una il¬∑lusi√≥: l'OS ens amaga la complexitat del maquinari i ens mostra una versi√≥ simplificada, f√†cil de gestionar.

Sota aquesta interf√≠cie amigable hi ha un principi de seguretat fonamental. El sistema operatiu divideix el programari en dos grans grups per q√ºestions de seguretat i estabilitat. El nucli del sistema operatiu, amb acc√©s total al maquinari, i √©s responsable de la gesti√≥ de recursos. Penseu-hi com el **cervell** de l'ordinador, que pren totes les decisions importants. La resta de programari, com les aplicacions que utilitzem di√†riament, t√© acc√©s limitat als recursos del sistema. Durant una sessi√≥ de treball, el sistema operatiu canvia entre aquests dos modes segons sigui necessari.
:::

## Qu√® √©s una M√†quina Virtual?

La **virtualitzaci√≥** presentar una visi√≥ abstracta dels recursos del sistema. Diversos processos **creuen** (tenen l'il¬∑lusi√≥) de disposar sempre d'un conjunt de recursos (m√†quinaria).

-   **Simplicitat** \blueArrow Il¬∑lusi√≥ de propietat de recursos
-   **A√Øllament** \blueArrow Els bugs es donen en un entorn virtual i no f√≠sic.
-   **Protecci√≥** \blueArrow Els processos no es poden fer mal entre ells.
-   **Portabilitat** \blueArrow Podem executar a totes les plataformes.

::: notes
Imagineu-vos que organitzem una LAN-party amb assistents, per√≤ nom√©s hi ha 1 pizza per alimentar-los. Com podem mostrar a cada un el seu propi tros de pizza i mantenir-los compromesos amb el nostre esdeveniment. F√†cil, creem 1 pizza virtual basada en la pizza real i donem a cada encarregat un tros de pizza virtual. Per√≤, aqu√≠ ve un problema si tots els assistents mengen la pizza alhora, no funcionar√†, alguns participants notarien el truc. Tanmateix, si programem els esdeveniments perqu√® molts participants s‚Äôocupin de les activitats i no mengin la pizza, els organitzadors poden intercanviar en temps real la pizza real i la virtual a les taules on els participants descansen, perqu√® s√≥n els √∫nics candidats a menjar i descobrir el truc, aix√≠ que Si mengen, la pizza ha de ser real.Java t√© un sandbox que permet utilitzar el Java independentment d'on executem.VirtualBox i VMWare ens permeten executar sistemes operatius dins de sistemes operatius. Tenim un sistema operatiu amfitri√≥ (m√†quina f√≠sica) i un o m√©s sistemes operatius virtuals (hostes).Tamb√© √©s possible virtualitzar sobre el hardware sense la necessitat d'un sistema operatiu (amfitri√≥).Tamb√© tenim virtualitzaci√≥ per contenidors (Docker).
:::

## Models de Virtualitzaci√≥ d'alt nivell

![](../figures/slides/01-introduction/virtualitzacio.png){style="display: block; margin-left: auto; margin-right: auto;"}

::: notes
-   **Virtualitzaci√≥ Nativa**: Hipervisor s'executa directament sobre el maquinari f√≠sic sense cap sistema operatiu intermedi. Exemples d'aquesta tecnologia inclouen VMware ESXi o Microsoft Hyper-V. Aix√≤ ofereix un rendiment molt elevat, ja que no hi ha cap capa addicional entre el maquinari i l'hipervisor, ideal per a entorns de producci√≥.
-   **Virtualitzaci√≥ Allotjada**: Hipervisor s'executa sobre un sistema operatiu ja existent. Per exemple, en KVM, s'utilitza Linux com a sistema operatiu base, i sobre aquest es creen les m√†quines virtuals.
-   **Paravirtualitzaci√≥**: El sistema operatiu convidat sap que est√† sent virtualitzat i coopera amb l'hipervisor per millorar el rendiment. Un exemple destacat √©s Xen, que √©s molt utilitzat en entorns cloud per la seva efici√®ncia.
-   **Virtualitzaci√≥ Assistida per Hardware**: Aquest model aprofita les capacitats del processador per accelerar el proc√©s de virtualitzaci√≥. Processadors moderns com els d'Intel (VT-x) o AMD (AMD-V) ofereixen suport per a aquest tipus de virtualitzaci√≥ (VMware o Hyper-V).
:::

## Qu√® √©s la Mem√≤ria Virtual?

-   La *mem√≤ria virtual* permet que cada proc√©s tingui la **il¬∑lusi√≥** que t√© acc√©s exclusiu a l'espai complet d'adreces de mem√≤ria del processador.
-   En realitat els processos utilitzen **diferents regions de la mem√≤ria** de l'ordinador, amb algunes regions traslladades al *disc* si no hi ha prou mem√≤ria per a tothom.

::: {.fragment style="text-align: center;"}
La unitat de **gesti√≥ de mem√≤ria (MMU)** d'un processador, que **tradueix** les *adreces virtuals* utilitzades pel programa en *adreces f√≠siques* que representen ubicacions de mem√≤ria reals.
:::

::: notes
Un exemple de virtualitzaci√≥ √©s la mem√≤ria virtual. La mem√≤ria virtual √©s una t√®cnica que permet als sistemes operatius utilitzar la mem√≤ria de manera m√©s eficient i segura. Aquesta t√®cnica crea una il¬∑lusi√≥ per als processos que els fa creure que tenen acc√©s exclusiu a l'espai complet d'adreces de mem√≤ria del processador. En realitat, els processos utilitzen diferents regions de la mem√≤ria de l'ordinador, amb algunes regions traslladades al disc si no hi ha prou mem√≤ria per a tothom. Aquesta t√®cnica permet que els processos s'executin de manera a√Øllada, evitant que un proc√©s pugui accedir a la mem√≤ria d'un altre proc√©s. Aix√≤ √©s important per garantir la seguretat i la estabilitat del sistema. La unitat de gesti√≥ de mem√≤ria (MMU) d'un processador √©s la responsable de traduir les adreces virtuals utilitzades pel programa en adreces f√≠siques que representen ubicacions de mem√≤ria reals. Aquesta traducci√≥ es fa mitjan√ßant taules de p√†gines que mapejen les adreces virtuals a les adreces f√≠siques. Aquest proc√©s l'estudiarem m√©s endavant en detall.
:::

## Quins s√≥n els rols SO? (I)

#### Il¬∑lusionista

Ofereix una **interf√≠cie simple** i f√†cil d'utilitzar per als recursos f√≠sics d'una m√†quina o sistema, **ocultant la complexitat t√®cnica**.

::: {.fragment .callout-note title="Exemple"}
Permet als usuaris utilitzar una impressora (*hardware*) sense con√®ixer els detalls t√®cnics d'aquesta impresora, com la interf√≠cie de comunicaci√≥, els controladors o els protocols de comunicaci√≥, disposem d'una funci√≥ (**imprimir**) que ens permet enviar un document a la impressora.
:::

::: notes
El sistema operatiu actua com un il¬∑lusionista que ens ofereix una interf√≠cie simple i f√†cil d'utilitzar per als recursos f√≠sics d'una m√†quina o sistema, ocultant la complexitat t√®cnica. Per exemple, quan utilitzem una impressora, no necessitem con√®ixer els detalls t√®cnics d'aquesta impressora, com la interf√≠cie de comunicaci√≥, els controladors o els protocols de comunicaci√≥. En canvi, podem utilitzar una funci√≥ simple com "imprimir" que ens permet enviar un document a la impressora sense preocupar-nos pels detalls t√®cnics. Aix√≤ fa que l'√∫s de la tecnologia sigui m√©s accessible i f√†cil per als usuaris.
:::

## Quins s√≥n els rols SO? (II)

#### Il¬∑lusionista

Proporciona una abstracci√≥ que permet a una aplicaci√≥ tenir √∫s exclusiu dels recursos quan sigui necessari, sense interfer√®ncies d'altres aplicacions.

::: {.fragment .callout-note title="Exemple"}
Permet utilitzar un programa de videoconfer√®ncia que utilitza la c√†mera i el micr√≤fon i ens garantitza que cap altre programa pugui utiltizar-los al mateix temps.
:::

## Quins s√≥n els rols SO? (III)

#### Il¬∑lusionista

Oferir una il¬∑lusi√≥ d'infinitat per als recursos de maquinari, assegurant que les aplicacions puguin continuar funcionant sense problemes.

::: {.fragment .callout-note title="Exemple"}
-   Permet a un usuari tenir m√∫ltiples aplicacions obertes alhora, tot i que nom√©s una estigui en primer pla.\
-   Crea una il¬∑lusi√≥ on cada proc√©s creu que √©s propietari dels recursos hardware.
:::

## Quins s√≥n els rols SO? (V)

#### √Ärbitre

Responsable de distribuir els recursos disponibles entre usuaris i aplicacions de manera eficient i justa.

::: {.fragment .callout-note title="Exemple"}
Un sistema amb m√∫ltiples usuaris, el temps de processador s'ha de repartir de manera equitativa entre tots els usuaris que executen aplicacions.
:::

## Quins s√≥n els rols SO? (VI)

#### √Ärbitre

Garanteix la segregaci√≥ i la protecci√≥ d'usuaris i aplicacions.

::: {.fragment .callout-note title="Exemple"}
Impedint que una aplicaci√≥ bloquegi o afecti el funcionament d'altres aplicacions.
:::

## Quins s√≥n els rols SO? (VII)

#### Pega

Proporciona un conjunt de serveis i funcionalitats comunes que poden ser compartits i reutilitzats per diverses parts d'un sistema.

-   **Compartici√≥**: Simplifica $\Rightarrow$ s'assumeixen sempre les mateixes primitives b√†siques.
-   **Reutilitzaci√≥**: Evita torna a implementar funcionalitats comunes. Permet evolucionar de forma independent els components.

## El Sistema de Fitxers

Un exemple de la funci√≥ de pega del sistema operatiu √©s el **sistema de fitxers**:

-   Proporciona una **interf√≠cie est√†ndard** per a la creaci√≥, lectura, escriptura i eliminaci√≥ de fitxers de format transparent *(read, write, open, close, ...)*
-   Ens permet implementar **libc** que proporciona funcions d'entrada/sortida d'alt nivell (*fopen, fread, fwrite, fclose, ...*)

## An√†lisi: Qu√® fa aquest programa? (I)

<br>

::::::: columns
::: {.column width="45%"}
``` c
#include <stdio.h>
#include <stdlib.h>

int main(int argc, 
    char *argv[])
{
  while(1)
  {
    printf("%s\n", argv[1]);
  }
  return 0
}
```
:::

::::: {.column width="55%"}
### `./prog H`

::: fragment
H <br> H <br> ...
:::

::: fragment
### `./prog H & ./prog O`

???
:::
:::::
:::::::

::: notes
:::

## An√†lisi: Qu√® fa aquest programa? (II)

![](../figures/slides/01-introduction/prog_A_B_Memory.png)

::: notes
En primer lloc, el programa c s'ha de compilar amb un compilador i enlla√ßar amb les llibreries del sistema que ens proporciona el sistema operatiu.

Un cop tenim un executable, si l'executem el sistema operatiu crear√† una estructura anomenada proc√©s on es guardar√† un identificador, un espai de mem√≤ria,... aquesta estructura √©s una de les abstraccions essencials per la funci√≥ d'il¬∑lusionisme.

Fixeu-vos que el mateix programa pot ser executat dos cops i el sistema operatiu generar√† 2 processos diferents. Amb identificadors diferents i espai de memoria diferent.
:::

## An√†lisi: Qu√® fa aquest programa? (III)

![](../figures/slides/01-introduction/prog_A_executing.png)

::: notes
Per tant, el sistema operatiu utilitzant el planificador assignar√† el processador (assumimim que nom√©s tenim 1 core) a 1 proc√©s durant un temps determinat i anir√† intercanviant (canvi de context) aquest proc√©s cada X temps, d'aquesta manera cada proc√©s creu tenir tots els recursos per ells (il¬∑lusi√≥).
:::

## An√†lisi: Qu√® fa aquest programa? (IV)

![](../figures/slides/01-introduction/prog_B_executing.png)

::: notes
Per fer-ho, el sistema operatiu guard√† una foto de l'estat actual del proc√©s a mem√≤ria i la recuperar√† m√©s endavant quan li torni a donar dret d'execuci√≥.

Noteu tamb√© que s'ha creat en m√®moria una subregi√≥ independent per cada proc√©s. Quan un proc√©s intenta accedir una zona de mem√≤ria for√† de la seva subregi√≥ o inexistent es dona el fam√≥s SEGMENTATION FAULT.

Com en l'√∫ltim exemple on el proc√©s intenta accedir a una zona de mem√≤ria que no li pertany. Aix√≤ √©s una de les funcions de protecci√≥ que ens ofereix el sistema operatiu. Al llarg del curs veurem amb m√©s detall com funcionen tots aquests mecanismes.
:::

## An√†lisi: Qu√® fa aquest programa? (V)

::::::::::: columns
::: {.column width="45%"}
``` c
#include <stdio.h>
#include <stdlib.h>

int main(int argc, 
    char *argv[])
{
  while(1)
  {
    printf("%s\n", argv[1]);
  }
  return 0
}
```
:::

::::::::: {.column width="55%"}
Depenen de la prioritat dels procesesos **A** o **B** poden tenir m√©s temps de *CPU* que l'altre i sortir els missatges de forma desordenada.

### ./prog H & ./prog O

:::::::: columns
::: {.column width="15%"}
:::

::: {.column width="20%"}
H <br> H <br> H <br> ...
:::

::: {.column width="20%"}
H <br> O <br> H <br> ...
:::

::: {.column width="20%"}
O <br> O <br> H <br> ...
:::

::: {.column width="15%"}
:::
::::::::
:::::::::
:::::::::::

## An√†lisi: Qu√® fa aquest programa? (VI)

::::: columns
::: {.column width="45%"}
``` c
#include <stdio.h>
#include <stdlib.h>

int main(int argc, 
    char *argv[])
{
  while(1)
  {
    printf("%s\n", argv[1]);
  }
  return 0
}
```
:::

::: {.column width="55%"}
### `./prog & ; ./prog O`

?????
:::
:::::

## An√†lisi: Qu√® fa aquest programa? (VII)

::::: columns
::: {.column width="45%"}
\onslide<1->

``` c
#include <stdio.h>
#include <stdlib.h>

int main(int argc, 
char *argv[])
{
  while(1)
  {
    printf("%s\n", argv[1]);
  }
  return 0
}
```
:::

::: {.column width="50%"}
### ./prog & ; ./prog O

Segmentation Fault <br> O <br> O <br> ...
:::
:::::

## An√†lisi: Qu√® fa aquest programa? (VIII)

::::::: columns
::: {.column width="60%"}
``` c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[])
{
  int *p = malloc(sizeof(int));
  printf("p: %p\n", p);
  int i = 1;
  while (1) {
    *p = i;
    printf("(%d) p: %d\n", getpid(), *p);
    i++;
  }
  free(p);
  return 0;
}
```
:::

::::: {.column width="40%"}
#### `./prog1`

::: fragment
``` {.bash code-line-numbers="false"}
(611) p: 0x5570014a02a0
(611) p: 1
(611) p: 2
(611) p: 3
(611) p: 4
```
:::

::: fragment
#### `./prog1 & ./prog1`

????
:::
:::::
:::::::

## An√†lisi: Qu√® fa aquest programa? (IX)

::::::: columns
::: {.column width="60%"}
``` c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[])
{
  int *p = malloc(sizeof(int));
  printf("p: %p\n", p);
  int i = 1;
  while (1) {
    *p = i;
    printf("(%d) p: %d\n", getpid(), *p);
    i++;
  }
  free(p);
  return 0;
}
```
:::

::: notes
Aquest programa crea un proc√©s que reserva mem√≤ria din√†mica per a un enter i imprimeix l'adre√ßa de mem√≤ria i el valor de l'enter en un bucle infinit. Si executem aquest programa dues vegades en paral¬∑lel, cada proc√©s tindr√† la seva pr√≤pia c√≤pia de la variable `p` i, per tant, les adreces de mem√≤ria seran diferents. Aix√≤ √©s gr√†cies a la mem√≤ria virtual que ens proporciona el sistema operatiu, que a√Ølla els processos entre si i els permet utilitzar les mateixes adreces de mem√≤ria sense interferir-se. El `%p` en la funci√≥ `printf` s'utilitza per imprimir l'adre√ßa de mem√≤ria en format hexadecimal veure m√©s informaci√≥ sobre els especificadors de format en C a [printf](https://en.cppreference.com/w/cpp/io/c/fprintf).
:::

:::: {.column width="40%"}
#### ./prog1 & ./prog1

``` {.bash code-line-numbers="false"}
(611) p: 0x5570014a02a0
(612) p: 0x5570014a02a0
(611) p: 1
(612) p: 1
(611) p: 2
(612) p: 2
```

::: {.fragment .callout-note title="Explicaci√≥"}
Les **adre√ßes virtuals** protegeixen els processosos entre ells i permeten que tots dos processos puguin fer servir la mateixa adre√ßa sense afectar-se.
:::
::::
:::::::

## Reptes en el disseny dels SO (I)

-   Complexitat de la **programaci√≥ distribu√Øda** (*concurrent* i *paral¬∑lela*).
-   Complexitat pel **context** (*m√≤bil, IoT, servidors, centres de dades*, ...).
-   Complexitat per la gran varietat d'elements de maquinari (**heterogene√Øtat**).
-   Complexitat en la **portabilitat** i la **compatibilitat**.
-   Equilibri entre **funcionalitat** i **rendiment**.
-   Equilibri entre **rendiment** i **√∫s d'energia**.

## Reptes en el disseny dels SO (II)

-   **Maximitzar la fiabilitat**: Els sistemes han de fer el que estan dissenyats per fer en tots els casos, fins i tot en cas d'errors inesperats.
-   **Maximitzar la disponibilitat**: Els sistemes han d'estar disponibles per a l'√∫s quan els usuaris ho necessiten, minimitzant el temps d'aturada i reparaci√≥ causat per fallades.
-   **Seguretat**: Els sistemes han de protegir-se contra accions malicioses i accidents involuntaris.

## Exemples de Disseny SO (I)

#### Vehicle

::: fragment
Un **vehicle aut√≤nom** ha de ser **segur** per als *passatgers* i per a la *gent que hi ha al seu voltant*. Ha de garantir que el *vehicle* no es pugui **controlar de forma remota** per un atacant. Tamb√© ha de ser **tolerant a fallades** i **recuperar-se d'errors** sense posar en perill la seguretat dels *passatgers*.
:::

## Reptes en el disseny dels so (III)

-   **Escalables**: Els sistemes han de funcionar b√© quan s'afegeixen recursos (usuaris, processos, ...) o quan es redueixen.
-   **Mantenibles**: Els sistemes han de ser f√†cils de mantenir i evolucionar al llarg del temps.

## Exemples de Disseny SO (I)

#### Tel√®fon m√≤bil

-   **Escalable** perqu√® el nombre d'usuaris pot augmentar molt r√†pidament.
-   **Mantenible** perqu√® els usuaris esperen actualitzacions peri√≤diques del **sistema operatiu**.
-   A m√©s a m√©s, aquestes *actualitzacions* s'han de poder *instal¬∑lar* de forma *transparent i sense afectar el funcionament del tel√®fon*.

## Per qu√® estudiar SO? (I)

-   S√≥n la base dels sistemes inform√†tics. (IoT, Servidors, M√≤bils, PC, ...).
-   Ens permeten entendre com funciona *realment* un sistema inform√†tic.
-   Els conceptes s√≥n aplicables a altres sistemes i problemes quotidians (**planificaci√≥ de tasques**).
-   Optimitzar el rendiment de les aplicacions.
-   Compendre les vulnerabilitats, proteccions i mitigacions de riscos de seguretat.

## Per qu√® estudiar SO? (II)

![](../figures/slides/01-introduction/evolution.png){style="display: block; margin-left: auto; margin-right: auto;"}

::: {style="text-align: center;"}
La comprensi√≥ en les decisions de disseny dels sistemes operatius i el raonament sobre els pros/contra us permetr√† rescatar idees obsoletes que poden ser √∫tils en el futur dels nous sistemes inform√†tics.
:::

::: notes
En particular, sovint passa que un canvi en la tecnologia fa que alguns idea obsoleta i r√†pidament desapareix. No obstant aix√≤, un altre canvi tecnol√≤gic podria tornar-lo a reviure. Aix√≤ √©s especialment cert quan el canvi t√© a veure amb el rendiment relatiu de les diferents parts del sistema. Per exemple, quan les CPUs es van fer molt m√©s r√†pides que les Mem√≤ries les caches van gaunyar molta importancia, per√≤ que passa si en un futur les mem√≤ries s√≥n molt m√©s r√†pides que les CPUs? En aquest cas, les caches ja no serien necess√†ries. En biologia, l'extinci√≥ √©s per sempre, per√≤ en inform√†tica, de vegades nom√©s √©s per uns quants anys.
:::

## Conclusions

-   Els **sistemes operatius** estan presents en tots els dispositius que fem servir.
-   El *disseny* es **complex** i requereix integrar dispositius diferents (*forma,espai,temps*).
-   Ens proporciones una il¬∑lusi√≥ d'una m√†quina virtual infinita.
-   √âs *il¬∑lusionista*, *√°rbrit* i proporciona un conjunt de serveis comuns per permetre la interacci√≥ entre programari i maquinari.
-   T√© cura del **rendiment, seguretat, portabilitat i fiabilitat**.

## Aix√≤ √©s tot per avui

::::: columns
::: {.column width="60%"}
#### Preguntes?

<br>

#### TAKE HOME MESSAGE

Els **sistemes operatius** ajuden als programadors a desenvolupar programari robust de forma independent del maquinari.
:::

::: {.column width="40%"}
![](https://static.posters.cz/image/750/posters/looney-tunes-thats-all-folks-i295.jpg)
:::
:::::